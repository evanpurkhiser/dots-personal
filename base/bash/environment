#!/usr/bin/env bash

# XDG directories
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

# Load homebrew configuration for macos as early as possible
[ -f /opt/homebrew/bin/brew ] && eval "$(cache_cmd /opt/homebrew/bin/brew shellenv)"

# homebrew sets the shell as a link, which tmux will not be happy about
export SHELL="$(realpath "$SHELL")"

# Set the systemd-style DBUS address
export DBUS_SESSION_BUS_ADDRESS=unix:path=$XDG_RUNTIME_DIR/bus

export PATH="$HOME/.local/bin:$XDG_CONFIG_HOME/bash/bin:$PATH"

# Look for terminfo files under data
[ -d "$XDG_DATA_HOME/terminfo" ] && export TERMINFO="$XDG_DATA_HOME/terminfo"

# Set path to inputrc configuration
export INPUTRC="$XDG_CONFIG_HOME/bash/inputrc"

# Volta node version + tooling management
export VOLTA_HOME="$HOME/.local/lib/volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# Ack configuration
export ACKRC="$XDG_CONFIG_HOME/ack/ackrc"
export ACK_PAGER_COLOR="less -x4SRFX"

# Always install ruby gems local to the user
if hash gem 2>/dev/null; then
	export GEMRC="$XDG_CONFIG_HOME/gemrc/config"
	export GEM_HOME="$HOME/.local/lib/ruby/gems/$(cache_cmd 'ruby -e "puts RbConfig::CONFIG[\"ruby_version\"]"')"
	export GEM_SPEC_CACHE="$XDG_CACHE_HOME/gem/specs"
	export PATH="$PATH:$GEM_HOME/bin"
fi

# Node
export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history
export TS_NODE_HISTORY="$XDG_DATA_HOME"/ts_node_repl_history
export YARN_RC_FILENAME="$XDG_CONFIG_HOME/yarn/yarnrc"

# NPM tool configuration
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export NPM_CONFIG_DEVDIR="$XDG_CACHE_HOME/node-gyp"
export PATH="$PATH:$HOME/.local/lib/nodejs/bin"

# Babel cache
export BABEL_CACHE_PATH="#XDG_CACHE_HOME/babel.json"

# sqlite history file
export SQLITE_HISTORY="$XDG_DATA_HOME/sqlite_history"

# Don't overrwrite an already configured GOPATH
if [ -z "${GOPATH+1}" ]; then
	export GOPATH="$HOME/.local/lib/go"
	export GO111MODULE=on
	export PATH="$PATH:$GOPATH/bin"
fi

# Disable python bytecode generation
export PYTHONDONTWRITEBYTECODE=1

# Configure poetry
export POETRY_HOME="$HOME/.local/lib/poetry"
export PATH="$PATH:$POETRY_HOME/bin"

# Python version management
# Pyenv uses the shim pattern, so must be first
if hash pyenv 2>/dev/null; then
	export PYENV_ROOT="$XDG_DATA_HOME/pyenv"
	export PATH="$PYENV_ROOT/bin:$PATH"
	export PATH="$PYENV_ROOT/shims:$PATH"
	eval "$(cache_cmd 'pyenv init --no-rehash -')"
fi

# AWS cli
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME/aws/config"
export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME/aws/credentials"

# Redis
export REDISCLI_HISTFILE="$XDG_DATA_HOME/rediscli_history"

# Cocoapods
export CP_HOME_DIR="$XDG_CONFIG_HOME/cocopods"
export CP_REPOS_DIR="$XDG_DATA_HOME/cocopods/repos"
export CP_TEMPLATES_DIR="$XDG_DATA_HOME/cocopods/templates"

# Rust
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export PATH="$PATH:$CARGO_HOME/bin"

# Ansible state home
export ANSIBLE_HOME="$XDG_STATE_HOME/ansible"

# Various more config paths
export PASSWORD_STORE_DIR="$XDG_DATA_HOME/password-store"
export VAGRANT_HOME="$XDG_DATA_HOME/vagrant"
export TRAVIS_CONFIG_PATH="$XDG_CONFIG_HOME/travis"
export HTTPIE_CONFIG_DIR="$XDG_CONFIG_HOME/httpie"
export ANSIBLE_CONFIG="$XDG_CONFIG_HOME/ansible/config.ini"
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
export GNUPGHOME="$XDG_CONFIG_HOME/gnupg"
export HGRCPATH="$XDG_CONFIG_HOME/hg/config"
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"
export PSQLRC="$XDG_CONFIG_HOME/psql/psqlrc"
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/rg/config"

# Less history file and key file
export LESSHISTFILE="$XDG_DATA_HOME/less_history"
export LESSKEY="$XDG_CONFIG_HOME/less/keyfile.bin"

# Don't add quotes when using ls
export QUOTING_STYLE="literal"

# Stop annoying javascript servers from opening vim (due to react-dev-utils).
# Uses `true` so that react-dev-utils thinks things were successful.
export REACT_EDITOR=true

# When using direnv, don't warn about slow execution
export DIRENV_WARN_TIMEOUT=20m

# Source shellcheck configuration
source "$XDG_CONFIG_HOME/bash/shellcheck"

# Include environment configurations from DATA_HOME
# if [ -d "$XDG_DATA_HOME/environment.d" ]; then
# 	for f in "$XDG_DATA_HOME/environment.d/"*; do source "$f"; done
# fi
