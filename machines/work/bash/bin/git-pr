#!/usr/bin/env bash
#
# Open a PR from the current commit. Asks for assignees

read -r -d '' assignees_query <<'EOF'
import os
import yaml
import requests
import subprocess

hub_file = os.path.expandvars("$XDG_CONFIG_HOME/hub")
hub_token = yaml.load(open(hub_file, 'r').read(), Loader=yaml.FullLoader)[
    'github.com'][0]['oauth_token']

try:
    owner, repo = subprocess.check_output(['git', 'config', '--get', 'remote.origin.url'], encoding='utf8') \
        .split(':')[1] \
        .strip() \
        .split('/')
except subprocess.CalledProcessError:
    exit(0)

query = u"""
query {
  repository(owner:"%(owner)s" name: "%(repo)s") {
    assignableUsers(last:100) {
      nodes { login name }
    }
  }
  organization(login:"%(owner)s"){
    teams(last:100) {
      nodes { combinedSlug name }
    }
  }
}
"""

r = requests.post(
    'https://api.github.com/graphql',
    json={'query': query % {'owner': owner, 'repo': repo}},
    headers={'Authorization': f'token {hub_token}'}
)

data = r.json()['data']

users = ['{0}\t{0} [{1}]'.format(u['login'], u.get('name', ' - ')) for u in data['repository']['assignableUsers']['nodes']]
teams = ['{1}\t{0} (team)'.format(u['name'], u['combinedSlug']) for u in data['organization']['teams']['nodes']]

print('\n'.join(users + teams))
EOF

git rev-parse || return 1

head="${1-@}"

# Use the commit message as a branch name
branch="evanpurkhiser/$(git show -q --format=%s "$head" | sed -E 's/[^0-9a-zA-Z ]//g;s/ /-/g' | tr -dc '[:print:]')"

# Branch name should be all lowercase
branch=$(echo "$branch" | perl -ne 'print lc')

# Select assignees
assignees="$(PYTHON_VERSION=3.10 VIRTUAL_ENV= python -c "$assignees_query" |
  FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS" fzf --header='Select Assignees:' --with-nth=2.. -m |
  cut -f1 |
  paste -s -d, -)"

echo "Opening pull-request from remote branch ${branch}"

git push origin "$head:refs/heads/$branch"
hub pull-request --reviewer "$assignees" --browse --force --head "$branch"
